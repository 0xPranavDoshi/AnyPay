/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace Client {
  export type EVMTokenAmountStruct = {
    token: AddressLike;
    amount: BigNumberish;
  };

  export type EVMTokenAmountStructOutput = [token: string, amount: bigint] & {
    token: string;
    amount: bigint;
  };

  export type Any2EVMMessageStruct = {
    messageId: BytesLike;
    sourceChainSelector: BigNumberish;
    sender: BytesLike;
    data: BytesLike;
    destTokenAmounts: Client.EVMTokenAmountStruct[];
  };

  export type Any2EVMMessageStructOutput = [
    messageId: string,
    sourceChainSelector: bigint,
    sender: string,
    data: string,
    destTokenAmounts: Client.EVMTokenAmountStructOutput[]
  ] & {
    messageId: string;
    sourceChainSelector: bigint;
    sender: string;
    data: string;
    destTokenAmounts: Client.EVMTokenAmountStructOutput[];
  };
}

export interface CrossChainExpenseSplitterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ccipReceive"
      | "contributeToExpense"
      | "contributeWithETHCrossChain"
      | "contributeWithETHLocal"
      | "contributeWithUSDCCrossChain"
      | "contributeWithUSDCLocal"
      | "createExpense"
      | "getExpenseDetails"
      | "getLastReceivedMessageDetails"
      | "getRouter"
      | "getUserContribution"
      | "hasUserPaid"
      | "s_expenses"
      | "s_swapRouter"
      | "s_usdc"
      | "s_weth"
      | "supportsInterface"
      | "withdraw"
      | "withdrawToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CCIPMessageSent"
      | "ContributionMade"
      | "ExpenseContribution"
      | "ExpenseCreated"
      | "ExpenseSettled"
      | "TokenSwapped"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ccipReceive",
    values: [Client.Any2EVMMessageStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "contributeToExpense",
    values: [
      BigNumberish,
      AddressLike,
      BytesLike,
      string,
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "contributeWithETHCrossChain",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contributeWithETHLocal",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "contributeWithUSDCCrossChain",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contributeWithUSDCLocal",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createExpense",
    values: [BytesLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getExpenseDetails",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastReceivedMessageDetails",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getRouter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getUserContribution",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasUserPaid",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "s_expenses",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "s_swapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "s_usdc", values?: undefined): string;
  encodeFunctionData(functionFragment: "s_weth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "ccipReceive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contributeToExpense",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contributeWithETHCrossChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contributeWithETHLocal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contributeWithUSDCCrossChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contributeWithUSDCLocal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createExpense",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExpenseDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastReceivedMessageDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserContribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasUserPaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "s_expenses", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "s_swapRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "s_usdc", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "s_weth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;
}

export namespace CCIPMessageSentEvent {
  export type InputTuple = [
    messageId: BytesLike,
    destinationChain: BigNumberish
  ];
  export type OutputTuple = [messageId: string, destinationChain: bigint];
  export interface OutputObject {
    messageId: string;
    destinationChain: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContributionMadeEvent {
  export type InputTuple = [
    expenseId: BytesLike,
    contributor: AddressLike,
    amount: BigNumberish,
    method: string
  ];
  export type OutputTuple = [
    expenseId: string,
    contributor: string,
    amount: bigint,
    method: string
  ];
  export interface OutputObject {
    expenseId: string;
    contributor: string;
    amount: bigint;
    method: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExpenseContributionEvent {
  export type InputTuple = [
    messageId: BytesLike,
    sourceChainSelector: BigNumberish,
    sender: AddressLike,
    contribution: string,
    token: AddressLike,
    tokenAmount: BigNumberish
  ];
  export type OutputTuple = [
    messageId: string,
    sourceChainSelector: bigint,
    sender: string,
    contribution: string,
    token: string,
    tokenAmount: bigint
  ];
  export interface OutputObject {
    messageId: string;
    sourceChainSelector: bigint;
    sender: string;
    contribution: string;
    token: string;
    tokenAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExpenseCreatedEvent {
  export type InputTuple = [
    expenseId: BytesLike,
    creator: AddressLike,
    amount: BigNumberish,
    description: string
  ];
  export type OutputTuple = [
    expenseId: string,
    creator: string,
    amount: bigint,
    description: string
  ];
  export interface OutputObject {
    expenseId: string;
    creator: string;
    amount: bigint;
    description: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExpenseSettledEvent {
  export type InputTuple = [
    expenseId: BytesLike,
    creator: AddressLike,
    totalPaid: BigNumberish
  ];
  export type OutputTuple = [
    expenseId: string,
    creator: string,
    totalPaid: bigint
  ];
  export interface OutputObject {
    expenseId: string;
    creator: string;
    totalPaid: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenSwappedEvent {
  export type InputTuple = [
    user: AddressLike,
    ethIn: BigNumberish,
    usdcOut: BigNumberish
  ];
  export type OutputTuple = [user: string, ethIn: bigint, usdcOut: bigint];
  export interface OutputObject {
    user: string;
    ethIn: bigint;
    usdcOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CrossChainExpenseSplitter extends BaseContract {
  connect(runner?: ContractRunner | null): CrossChainExpenseSplitter;
  waitForDeployment(): Promise<this>;

  interface: CrossChainExpenseSplitterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ccipReceive: TypedContractMethod<
    [message: Client.Any2EVMMessageStruct],
    [void],
    "nonpayable"
  >;

  contributeToExpense: TypedContractMethod<
    [
      _destinationChainSelector: BigNumberish,
      _receiver: AddressLike,
      _expenseId: BytesLike,
      _contributorNote: string,
      _token: AddressLike,
      _amount: BigNumberish
    ],
    [void],
    "payable"
  >;

  contributeWithETHCrossChain: TypedContractMethod<
    [expenseId: BytesLike, destinationChainSelector: BigNumberish],
    [void],
    "payable"
  >;

  contributeWithETHLocal: TypedContractMethod<
    [expenseId: BytesLike],
    [void],
    "payable"
  >;

  contributeWithUSDCCrossChain: TypedContractMethod<
    [
      expenseId: BytesLike,
      amount: BigNumberish,
      destinationChainSelector: BigNumberish
    ],
    [void],
    "payable"
  >;

  contributeWithUSDCLocal: TypedContractMethod<
    [expenseId: BytesLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  createExpense: TypedContractMethod<
    [expenseId: BytesLike, totalAmount: BigNumberish, description: string],
    [void],
    "nonpayable"
  >;

  getExpenseDetails: TypedContractMethod<
    [expenseId: BytesLike],
    [
      [string, bigint, bigint, boolean, string] & {
        creator: string;
        totalAmount: bigint;
        amountPaid: bigint;
        settled: boolean;
        description: string;
      }
    ],
    "view"
  >;

  getLastReceivedMessageDetails: TypedContractMethod<
    [],
    [
      [string, string, string, bigint] & {
        messageId: string;
        text: string;
        tokenAddress: string;
        tokenAmount: bigint;
      }
    ],
    "view"
  >;

  getRouter: TypedContractMethod<[], [string], "view">;

  getUserContribution: TypedContractMethod<
    [expenseId: BytesLike, user: AddressLike],
    [bigint],
    "view"
  >;

  hasUserPaid: TypedContractMethod<
    [expenseId: BytesLike, user: AddressLike],
    [boolean],
    "view"
  >;

  s_expenses: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, bigint, bigint, boolean, string] & {
        creator: string;
        totalAmount: bigint;
        amountPaid: bigint;
        settled: boolean;
        description: string;
      }
    ],
    "view"
  >;

  s_swapRouter: TypedContractMethod<[], [string], "view">;

  s_usdc: TypedContractMethod<[], [string], "view">;

  s_weth: TypedContractMethod<[], [string], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  withdraw: TypedContractMethod<
    [_beneficiary: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawToken: TypedContractMethod<
    [_beneficiary: AddressLike, _token: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ccipReceive"
  ): TypedContractMethod<
    [message: Client.Any2EVMMessageStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "contributeToExpense"
  ): TypedContractMethod<
    [
      _destinationChainSelector: BigNumberish,
      _receiver: AddressLike,
      _expenseId: BytesLike,
      _contributorNote: string,
      _token: AddressLike,
      _amount: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "contributeWithETHCrossChain"
  ): TypedContractMethod<
    [expenseId: BytesLike, destinationChainSelector: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "contributeWithETHLocal"
  ): TypedContractMethod<[expenseId: BytesLike], [void], "payable">;
  getFunction(
    nameOrSignature: "contributeWithUSDCCrossChain"
  ): TypedContractMethod<
    [
      expenseId: BytesLike,
      amount: BigNumberish,
      destinationChainSelector: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "contributeWithUSDCLocal"
  ): TypedContractMethod<
    [expenseId: BytesLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createExpense"
  ): TypedContractMethod<
    [expenseId: BytesLike, totalAmount: BigNumberish, description: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getExpenseDetails"
  ): TypedContractMethod<
    [expenseId: BytesLike],
    [
      [string, bigint, bigint, boolean, string] & {
        creator: string;
        totalAmount: bigint;
        amountPaid: bigint;
        settled: boolean;
        description: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLastReceivedMessageDetails"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint] & {
        messageId: string;
        text: string;
        tokenAddress: string;
        tokenAmount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getUserContribution"
  ): TypedContractMethod<
    [expenseId: BytesLike, user: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasUserPaid"
  ): TypedContractMethod<
    [expenseId: BytesLike, user: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "s_expenses"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, bigint, bigint, boolean, string] & {
        creator: string;
        totalAmount: bigint;
        amountPaid: bigint;
        settled: boolean;
        description: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "s_swapRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "s_usdc"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "s_weth"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[_beneficiary: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawToken"
  ): TypedContractMethod<
    [_beneficiary: AddressLike, _token: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "CCIPMessageSent"
  ): TypedContractEvent<
    CCIPMessageSentEvent.InputTuple,
    CCIPMessageSentEvent.OutputTuple,
    CCIPMessageSentEvent.OutputObject
  >;
  getEvent(
    key: "ContributionMade"
  ): TypedContractEvent<
    ContributionMadeEvent.InputTuple,
    ContributionMadeEvent.OutputTuple,
    ContributionMadeEvent.OutputObject
  >;
  getEvent(
    key: "ExpenseContribution"
  ): TypedContractEvent<
    ExpenseContributionEvent.InputTuple,
    ExpenseContributionEvent.OutputTuple,
    ExpenseContributionEvent.OutputObject
  >;
  getEvent(
    key: "ExpenseCreated"
  ): TypedContractEvent<
    ExpenseCreatedEvent.InputTuple,
    ExpenseCreatedEvent.OutputTuple,
    ExpenseCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ExpenseSettled"
  ): TypedContractEvent<
    ExpenseSettledEvent.InputTuple,
    ExpenseSettledEvent.OutputTuple,
    ExpenseSettledEvent.OutputObject
  >;
  getEvent(
    key: "TokenSwapped"
  ): TypedContractEvent<
    TokenSwappedEvent.InputTuple,
    TokenSwappedEvent.OutputTuple,
    TokenSwappedEvent.OutputObject
  >;

  filters: {
    "CCIPMessageSent(bytes32,uint64)": TypedContractEvent<
      CCIPMessageSentEvent.InputTuple,
      CCIPMessageSentEvent.OutputTuple,
      CCIPMessageSentEvent.OutputObject
    >;
    CCIPMessageSent: TypedContractEvent<
      CCIPMessageSentEvent.InputTuple,
      CCIPMessageSentEvent.OutputTuple,
      CCIPMessageSentEvent.OutputObject
    >;

    "ContributionMade(bytes32,address,uint256,string)": TypedContractEvent<
      ContributionMadeEvent.InputTuple,
      ContributionMadeEvent.OutputTuple,
      ContributionMadeEvent.OutputObject
    >;
    ContributionMade: TypedContractEvent<
      ContributionMadeEvent.InputTuple,
      ContributionMadeEvent.OutputTuple,
      ContributionMadeEvent.OutputObject
    >;

    "ExpenseContribution(bytes32,uint64,address,string,address,uint256)": TypedContractEvent<
      ExpenseContributionEvent.InputTuple,
      ExpenseContributionEvent.OutputTuple,
      ExpenseContributionEvent.OutputObject
    >;
    ExpenseContribution: TypedContractEvent<
      ExpenseContributionEvent.InputTuple,
      ExpenseContributionEvent.OutputTuple,
      ExpenseContributionEvent.OutputObject
    >;

    "ExpenseCreated(bytes32,address,uint256,string)": TypedContractEvent<
      ExpenseCreatedEvent.InputTuple,
      ExpenseCreatedEvent.OutputTuple,
      ExpenseCreatedEvent.OutputObject
    >;
    ExpenseCreated: TypedContractEvent<
      ExpenseCreatedEvent.InputTuple,
      ExpenseCreatedEvent.OutputTuple,
      ExpenseCreatedEvent.OutputObject
    >;

    "ExpenseSettled(bytes32,address,uint256)": TypedContractEvent<
      ExpenseSettledEvent.InputTuple,
      ExpenseSettledEvent.OutputTuple,
      ExpenseSettledEvent.OutputObject
    >;
    ExpenseSettled: TypedContractEvent<
      ExpenseSettledEvent.InputTuple,
      ExpenseSettledEvent.OutputTuple,
      ExpenseSettledEvent.OutputObject
    >;

    "TokenSwapped(address,uint256,uint256)": TypedContractEvent<
      TokenSwappedEvent.InputTuple,
      TokenSwappedEvent.OutputTuple,
      TokenSwappedEvent.OutputObject
    >;
    TokenSwapped: TypedContractEvent<
      TokenSwappedEvent.InputTuple,
      TokenSwappedEvent.OutputTuple,
      TokenSwappedEvent.OutputObject
    >;
  };
}
