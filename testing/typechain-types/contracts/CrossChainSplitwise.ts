/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Client {
  export type EVMTokenAmountStruct = {
    token: AddressLike;
    amount: BigNumberish;
  };

  export type EVMTokenAmountStructOutput = [token: string, amount: bigint] & {
    token: string;
    amount: bigint;
  };

  export type Any2EVMMessageStruct = {
    messageId: BytesLike;
    sourceChainSelector: BigNumberish;
    sender: BytesLike;
    data: BytesLike;
    destTokenAmounts: Client.EVMTokenAmountStruct[];
  };

  export type Any2EVMMessageStructOutput = [
    messageId: string,
    sourceChainSelector: bigint,
    sender: string,
    data: string,
    destTokenAmounts: Client.EVMTokenAmountStructOutput[]
  ] & {
    messageId: string;
    sourceChainSelector: bigint;
    sender: string;
    data: string;
    destTokenAmounts: Client.EVMTokenAmountStructOutput[];
  };
}

export interface CrossChainSplitwiseInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptOwnership"
      | "ccipReceive"
      | "contributeCrossChain"
      | "contributeLocal"
      | "createExpense"
      | "estimateCCIPFees"
      | "expenses"
      | "getContribution"
      | "getExpenseDetails"
      | "getRouter"
      | "hasContributed"
      | "owner"
      | "supportsInterface"
      | "transferOwnership"
      | "usdcToken"
      | "withdraw"
      | "withdrawToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ContributionMade"
      | "ExpenseCreated"
      | "ExpenseSettled"
      | "MessageReceived"
      | "MessageSent"
      | "OwnershipTransferRequested"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ccipReceive",
    values: [Client.Any2EVMMessageStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "contributeCrossChain",
    values: [BytesLike, BigNumberish, BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contributeLocal",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createExpense",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateCCIPFees",
    values: [BytesLike, BigNumberish, BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "expenses", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getContribution",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getExpenseDetails",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getRouter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "hasContributed",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "usdcToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ccipReceive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contributeCrossChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contributeLocal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createExpense",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateCCIPFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "expenses", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getContribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExpenseDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasContributed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdcToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;
}

export namespace ContributionMadeEvent {
  export type InputTuple = [
    expenseId: BytesLike,
    contributor: AddressLike,
    amount: BigNumberish,
    fromCrossChain: boolean
  ];
  export type OutputTuple = [
    expenseId: string,
    contributor: string,
    amount: bigint,
    fromCrossChain: boolean
  ];
  export interface OutputObject {
    expenseId: string;
    contributor: string;
    amount: bigint;
    fromCrossChain: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExpenseCreatedEvent {
  export type InputTuple = [
    expenseId: BytesLike,
    creator: AddressLike,
    totalAmount: BigNumberish
  ];
  export type OutputTuple = [
    expenseId: string,
    creator: string,
    totalAmount: bigint
  ];
  export interface OutputObject {
    expenseId: string;
    creator: string;
    totalAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExpenseSettledEvent {
  export type InputTuple = [expenseId: BytesLike, totalPaid: BigNumberish];
  export type OutputTuple = [expenseId: string, totalPaid: bigint];
  export interface OutputObject {
    expenseId: string;
    totalPaid: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MessageReceivedEvent {
  export type InputTuple = [
    messageId: BytesLike,
    expenseId: BytesLike,
    contributor: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    messageId: string,
    expenseId: string,
    contributor: string,
    amount: bigint
  ];
  export interface OutputObject {
    messageId: string;
    expenseId: string;
    contributor: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MessageSentEvent {
  export type InputTuple = [
    messageId: BytesLike,
    expenseId: BytesLike,
    contributor: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    messageId: string,
    expenseId: string,
    contributor: string,
    amount: bigint
  ];
  export interface OutputObject {
    messageId: string;
    expenseId: string;
    contributor: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferRequestedEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike];
  export type OutputTuple = [from: string, to: string];
  export interface OutputObject {
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike];
  export type OutputTuple = [from: string, to: string];
  export interface OutputObject {
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CrossChainSplitwise extends BaseContract {
  connect(runner?: ContractRunner | null): CrossChainSplitwise;
  waitForDeployment(): Promise<this>;

  interface: CrossChainSplitwiseInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  ccipReceive: TypedContractMethod<
    [message: Client.Any2EVMMessageStruct],
    [void],
    "nonpayable"
  >;

  contributeCrossChain: TypedContractMethod<
    [
      expenseId: BytesLike,
      amount: BigNumberish,
      destinationChainSelector: BigNumberish,
      receiver: AddressLike,
      payFeesIn: BigNumberish
    ],
    [void],
    "payable"
  >;

  contributeLocal: TypedContractMethod<
    [expenseId: BytesLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  createExpense: TypedContractMethod<
    [expenseId: BytesLike, totalAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  estimateCCIPFees: TypedContractMethod<
    [
      expenseId: BytesLike,
      amount: BigNumberish,
      destinationChainSelector: BigNumberish,
      receiver: AddressLike,
      payFeesIn: BigNumberish
    ],
    [bigint],
    "view"
  >;

  expenses: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, bigint, bigint, boolean] & {
        creator: string;
        totalAmount: bigint;
        amountPaid: bigint;
        settled: boolean;
      }
    ],
    "view"
  >;

  getContribution: TypedContractMethod<
    [expenseId: BytesLike, contributor: AddressLike],
    [bigint],
    "view"
  >;

  getExpenseDetails: TypedContractMethod<
    [expenseId: BytesLike],
    [
      [string, bigint, bigint, boolean] & {
        creator: string;
        totalAmount: bigint;
        amountPaid: bigint;
        settled: boolean;
      }
    ],
    "view"
  >;

  getRouter: TypedContractMethod<[], [string], "view">;

  hasContributed: TypedContractMethod<
    [expenseId: BytesLike, contributor: AddressLike],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [to: AddressLike],
    [void],
    "nonpayable"
  >;

  usdcToken: TypedContractMethod<[], [string], "view">;

  withdraw: TypedContractMethod<
    [beneficiary: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawToken: TypedContractMethod<
    [beneficiary: AddressLike, token: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "ccipReceive"
  ): TypedContractMethod<
    [message: Client.Any2EVMMessageStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "contributeCrossChain"
  ): TypedContractMethod<
    [
      expenseId: BytesLike,
      amount: BigNumberish,
      destinationChainSelector: BigNumberish,
      receiver: AddressLike,
      payFeesIn: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "contributeLocal"
  ): TypedContractMethod<
    [expenseId: BytesLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createExpense"
  ): TypedContractMethod<
    [expenseId: BytesLike, totalAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "estimateCCIPFees"
  ): TypedContractMethod<
    [
      expenseId: BytesLike,
      amount: BigNumberish,
      destinationChainSelector: BigNumberish,
      receiver: AddressLike,
      payFeesIn: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "expenses"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, bigint, bigint, boolean] & {
        creator: string;
        totalAmount: bigint;
        amountPaid: bigint;
        settled: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getContribution"
  ): TypedContractMethod<
    [expenseId: BytesLike, contributor: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getExpenseDetails"
  ): TypedContractMethod<
    [expenseId: BytesLike],
    [
      [string, bigint, bigint, boolean] & {
        creator: string;
        totalAmount: bigint;
        amountPaid: bigint;
        settled: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "hasContributed"
  ): TypedContractMethod<
    [expenseId: BytesLike, contributor: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[to: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "usdcToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[beneficiary: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawToken"
  ): TypedContractMethod<
    [beneficiary: AddressLike, token: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ContributionMade"
  ): TypedContractEvent<
    ContributionMadeEvent.InputTuple,
    ContributionMadeEvent.OutputTuple,
    ContributionMadeEvent.OutputObject
  >;
  getEvent(
    key: "ExpenseCreated"
  ): TypedContractEvent<
    ExpenseCreatedEvent.InputTuple,
    ExpenseCreatedEvent.OutputTuple,
    ExpenseCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ExpenseSettled"
  ): TypedContractEvent<
    ExpenseSettledEvent.InputTuple,
    ExpenseSettledEvent.OutputTuple,
    ExpenseSettledEvent.OutputObject
  >;
  getEvent(
    key: "MessageReceived"
  ): TypedContractEvent<
    MessageReceivedEvent.InputTuple,
    MessageReceivedEvent.OutputTuple,
    MessageReceivedEvent.OutputObject
  >;
  getEvent(
    key: "MessageSent"
  ): TypedContractEvent<
    MessageSentEvent.InputTuple,
    MessageSentEvent.OutputTuple,
    MessageSentEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferRequested"
  ): TypedContractEvent<
    OwnershipTransferRequestedEvent.InputTuple,
    OwnershipTransferRequestedEvent.OutputTuple,
    OwnershipTransferRequestedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "ContributionMade(bytes32,address,uint256,bool)": TypedContractEvent<
      ContributionMadeEvent.InputTuple,
      ContributionMadeEvent.OutputTuple,
      ContributionMadeEvent.OutputObject
    >;
    ContributionMade: TypedContractEvent<
      ContributionMadeEvent.InputTuple,
      ContributionMadeEvent.OutputTuple,
      ContributionMadeEvent.OutputObject
    >;

    "ExpenseCreated(bytes32,address,uint256)": TypedContractEvent<
      ExpenseCreatedEvent.InputTuple,
      ExpenseCreatedEvent.OutputTuple,
      ExpenseCreatedEvent.OutputObject
    >;
    ExpenseCreated: TypedContractEvent<
      ExpenseCreatedEvent.InputTuple,
      ExpenseCreatedEvent.OutputTuple,
      ExpenseCreatedEvent.OutputObject
    >;

    "ExpenseSettled(bytes32,uint256)": TypedContractEvent<
      ExpenseSettledEvent.InputTuple,
      ExpenseSettledEvent.OutputTuple,
      ExpenseSettledEvent.OutputObject
    >;
    ExpenseSettled: TypedContractEvent<
      ExpenseSettledEvent.InputTuple,
      ExpenseSettledEvent.OutputTuple,
      ExpenseSettledEvent.OutputObject
    >;

    "MessageReceived(bytes32,bytes32,address,uint256)": TypedContractEvent<
      MessageReceivedEvent.InputTuple,
      MessageReceivedEvent.OutputTuple,
      MessageReceivedEvent.OutputObject
    >;
    MessageReceived: TypedContractEvent<
      MessageReceivedEvent.InputTuple,
      MessageReceivedEvent.OutputTuple,
      MessageReceivedEvent.OutputObject
    >;

    "MessageSent(bytes32,bytes32,address,uint256)": TypedContractEvent<
      MessageSentEvent.InputTuple,
      MessageSentEvent.OutputTuple,
      MessageSentEvent.OutputObject
    >;
    MessageSent: TypedContractEvent<
      MessageSentEvent.InputTuple,
      MessageSentEvent.OutputTuple,
      MessageSentEvent.OutputObject
    >;

    "OwnershipTransferRequested(address,address)": TypedContractEvent<
      OwnershipTransferRequestedEvent.InputTuple,
      OwnershipTransferRequestedEvent.OutputTuple,
      OwnershipTransferRequestedEvent.OutputObject
    >;
    OwnershipTransferRequested: TypedContractEvent<
      OwnershipTransferRequestedEvent.InputTuple,
      OwnershipTransferRequestedEvent.OutputTuple,
      OwnershipTransferRequestedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
